#pragma once

#include <cstdint>

namespace MdlParser::Enums {
  namespace Mdl {
    enum class Flags : int32_t {
      AUTOGENERATED_HITBOX = 0x00000001,
      USES_ENV_CUBEMAP = 0x00000002,
      FORCE_OPAQUE = 0x00000004,
      TRANSLUCENT_TWOPASS = 0x00000008,
      STATIC_PROP = 0x00000010,
      USES_FB_TEXTURE = 0x00000020,
      HASSHADOWLOD = 0x00000040,
      USES_BUMPMAPPING = 0x00000080,
      USE_SHADOWLOD_MATERIALS = 0x00000100,
      OBSOLETE = 0x00000200,
      UNUSED = 0x00000400,
      NO_FORCED_FADE = 0x00000800,
      FORCE_PHONEME_CROSSFADE = 0x00001000,
      CONSTANT_DIRECTIONAL_LIGHT_DOT = 0x00002000,
      FLEXES_CONVERTED = 0x00004000,
      BUILT_IN_PREVIEW_MODE = 0x00008000,
      AMBIENT_BOOST = 0x00010000,
      DO_NOT_CAST_SHADOWS = 0x00020000,
      CAST_TEXTURE_SHADOWS = 0x00040000,
      VERT_ANIM_FIXED_POINT_SCALE = 0x00200000
    };

    enum class VertAnimType : uint8_t {};
  }

  namespace Vtx {
    enum class StripFlags : uint8_t {
      NONE = 0,

      IS_TRILIST = 0x01,
      IS_TRISTRIP = 0x02
    };
    inline StripFlags operator&(const StripFlags& a, const StripFlags& b) {
      return static_cast<StripFlags>(static_cast<uint8_t>(a) & static_cast<uint8_t>(b));
    }
    inline StripFlags operator|(const StripFlags& a, const StripFlags& b) {
      return static_cast<StripFlags>(static_cast<uint8_t>(a) & static_cast<uint8_t>(b));
    }

    enum class StripGroupFlags : uint8_t {
      NONE = 0,

      IS_FLEXED = 0x01,
      IS_HWSKINNED = 0x02,
      IS_DELTA_FLEXED = 0x04,
      SUPPRESS_HW_MORPH = 0x08
    };
    inline StripGroupFlags operator&(const StripGroupFlags& a, const StripGroupFlags& b) {
      return static_cast<StripGroupFlags>(static_cast<uint8_t>(a) & static_cast<uint8_t>(b));
    }
    inline StripGroupFlags operator|(const StripGroupFlags& a, const StripGroupFlags& b) {
      return static_cast<StripGroupFlags>(static_cast<uint8_t>(a) & static_cast<uint8_t>(b));
    }

    enum class MeshFlags : uint8_t {
      NONE = 0,

      IS_TEETH = 0x01,
      IS_EYES = 0x02
    };
    inline MeshFlags operator&(const MeshFlags& a, const MeshFlags& b) {
      return static_cast<MeshFlags>(static_cast<uint8_t>(a) & static_cast<uint8_t>(b));
    }
    inline MeshFlags operator|(const MeshFlags& a, const MeshFlags& b) {
      return static_cast<MeshFlags>(static_cast<uint8_t>(a) & static_cast<uint8_t>(b));
    }
  }
}
